{"version":3,"sources":["serviceWorker.ts","service/error.tsx","config.ts","service/sdk.ts","service/wallet.tsx","theme/Button.tsx","theme/ErrorMessage.tsx","theme/Header.tsx","theme/Loading.tsx","theme/PageLayout.tsx","components/ErrorLogic.tsx","components/Splash.tsx","components/ContractList/ContractItem.tsx","components/ContractList/index.tsx","components/HeaderLogic.tsx","components/ContractLogic/ContractInfo.tsx","components/Form/TextField.tsx","components/ContractLogic/TransferForm.tsx","components/ContractLogic/NameDetails.tsx","components/ContractLogic/SearchForm.tsx","components/ContractLogic/index.tsx","routes/details.tsx","index.tsx","routes/index.tsx"],"names":["Boolean","window","location","hostname","match","initError","config","httpUrl","faucetUrl","codeId","callback","state","error","setError","err","console","log","toString","clearError","ErrorContext","React","useError","ErrorProvider","props","value","setValue","undefined","context","Provider","children","loadOrCreateMnemonic","key","loaded","localStorage","getItem","generated","Bip39","encode","Random","getBytes","setItem","burnerWallet","a","mnemonic","Secp256k1Pen","fromMnemonic","pen","pubkey","encodeSecp256k1Pubkey","address","encodeAddress","signer","signBytes","sign","client","SigningCosmWasmClient","defaultContext","loading","getClient","Error","getRestClient","CosmWasmContext","useSdk","BurnerWalletProvider","SdkProvider","loadWallet","useState","useEffect","then","wallet","connect","getAccount","acct","coins","length","ky","post","json","ticker","result","restClient","RestClient","catch","useStyles","makeStyles","root","background","color","Button","classes","className","ErrorMessage","variant","onClick","Header","account","balance","map","amount","denom","join","AppBar","Toolbar","to","IconButton","edge","ArrowBack","Loading","flexGrow","PageLayout","Grid","container","spacing","item","xs","ErrorLogic","Splash","ContractItem","name","init_msg","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","defaultCodeId","listContractAddresses","addrs","getContractInfo","info","code_id","push","ContractList","contracts","listContractsByCodeId","List","HeaderLogic","coin_str","coin","ContractInfo","purchase_price","transfer_price","TextField","form","validate","onChanged","restProps","useField","input","meta","touched","pristine","helperText","onChange","event","margin","longerThan","minLength","composeValidators","validators","allValues","validationError","validator","required","TransferForm","useForm","onSubmit","values","handleSubmit","submitting","invalid","validatorName","useMemo","Box","display","marginTop","marginBottom","label","placeholder","type","fullWidth","width","justifyContent","disabled","NameDetails","doPurchase","contract","payment","execute","contractAddress","register","onUpdate","doTransfer","newOwner","transfer","owner","SearchForm","emptyInfo","creator","ContractLogic","setState","queryContractSmart","resolverecord","res","raw","o","JSON","parse","Encoding","fromUtf8","includes","Details","Component","useParams","Routes","basename","exact","path","component","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5c081805.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from \"react\";\n\n/*\nUgly to use a singleton to manage functions, but the issue is that we want to return the same\nsetError, clearError functions to the consumers, so they don't trigger new effects everytime\nwe update the error state, which can lead to an infinite loop:\n\nComponent.useEffect returns error, calls setError\nErrorProvider updates value and returns new closure for setError\nuseEffect is triggered again, with another error....\n\nWhen this is updated, we only want things to re-render that depend on the actual error value.\nThere may be cleaner ways to do this but encapsulating a singleton here seemed fine.\n(We can't rely on local variables that change each time ErrorProvider() is called).\n*/\n\nlet initError: string | undefined;\n\n// this should be set on first render\nlet callback = (state: State): void => {\n    // this is overriden on first render\n    initError = state.error; \n}\n\nfunction setError(err: any): void {\n    console.log(`Set error: ${err}`);\n    const error = (typeof err === \"string\") ? err : err.toString();\n    callback({error});\n}\n\nfunction clearError(): void {\n    console.log(`Clear error`);\n    callback({});\n}\n\n/******************/\n\nexport interface IErrorContext {\n    readonly error?: string;\n    readonly setError: (err: string) => void;\n    readonly clearError: () => void;\n}\n\nconst defaultContext = (): IErrorContext => {\n    return {\n        setError,\n        clearError,\n    };\n};\n\nexport const ErrorContext = React.createContext<IErrorContext>(defaultContext());\n\nexport const useError = () => React.useContext(ErrorContext);\n\ninterface State {\n    readonly error?: string;\n}\n\n\nexport function ErrorProvider(props: {readonly children: any}): JSX.Element {\n    console.log(\"Re-render ErrorProvider\");\n    const [value, setValue] = React.useState<State>({});\n    callback = setValue;\n    // if there is an error before we render the first time, make sure we render it\n    if (initError) {\n        setValue({error: initError});\n        initError = undefined;\n    }\n\n    const context: IErrorContext = {\n        error: value.error,\n        setError,\n        clearError,\n    };\n\n    return (\n        <ErrorContext.Provider value={context}>\n          {props.children}\n        </ErrorContext.Provider>\n      );    \n}\n","\nexport interface AppConfig {\n    readonly httpUrl: string;\n    readonly faucetUrl?: string;\n    // codeId is the wasm codeId for the name service contract on the given chain\n    readonly codeId: number;\n};\n\nconst local: AppConfig = {\n    httpUrl: \"http://localhost:1317\",\n    faucetUrl: \"http://localhost:8000/credit\",\n    codeId: 2,\n};\n\nconst demo: AppConfig = {\n    httpUrl: \"https://lcd.demo.cosmwasm.com\",\n    faucetUrl: \"https://faucet.demo.cosmwasm.com/credit\",\n    codeId: 2,\n};\n\n// REACT_APP_LOCAL is set via `yarn start:local`\nconst isLocal = process.env.NODE_ENV !== \"production\" && !!process.env.REACT_APP_LOCAL;\n\nexport const config = isLocal ? local : demo;","import { SigningCosmWasmClient, encodeAddress, encodeSecp256k1Pubkey, Secp256k1Pen, types } from \"@cosmwasm/sdk\";\nimport { Bip39, Random } from \"@iov/crypto\";\n\n// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nexport function generateMnemonic(): string {\n    return Bip39.encode(Random.getBytes(16)).toString();\n}\n\n// some code that will only work in a browser...\nexport function loadOrCreateMnemonic(): string {\n    const key = \"burner-wallet\";\n    const loaded = localStorage.getItem(key);\n    if (loaded) {\n        return loaded;\n    }\n    const generated = generateMnemonic();\n    localStorage.setItem(key, generated);\n    return generated;\n}\n\nexport interface ConnectResult {\n    readonly address: string,\n    readonly client: SigningCosmWasmClient,\n}\n\nexport interface SigningCallback {\n    (signBytes: Uint8Array): Promise<types.StdSignature>;\n}\n  \nexport interface Wallet {\n    readonly address: string;\n    readonly signer: SigningCallback;\n}\n  \nexport async function burnerWallet(): Promise<Wallet> {\n    const mnemonic = loadOrCreateMnemonic();\n    const pen = await Secp256k1Pen.fromMnemonic(mnemonic);\n    const pubkey = encodeSecp256k1Pubkey(pen.pubkey);\n    const address = encodeAddress(pubkey, \"cosmos\");\n    const signer = (signBytes: Uint8Array) => pen.sign(signBytes);    \n    return { address, signer };\n}\n\n// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nexport async function connect(httpUrl: string, {address, signer}: Wallet): Promise<ConnectResult> {    \n    const client = new SigningCosmWasmClient(httpUrl, address, signer);\n    return { address, client} ;\n}\n","import ky from \"ky\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\n\nimport { RestClient, SigningCosmWasmClient } from \"@cosmwasm/sdk\";\n\nimport { AppConfig } from \"../config\";\nimport { useError } from \"./error\";\nimport { burnerWallet, connect, Wallet } from \"./sdk\";\n\nexport interface ICosmWasmContext {\n    readonly loading: boolean;\n    readonly address: string;\n    readonly getClient: () => SigningCosmWasmClient;\n    readonly getRestClient: () => RestClient;\n}\n\nconst defaultContext: ICosmWasmContext = {\n    loading: true,\n    address: \"\",\n    getClient: (): SigningCosmWasmClient => { throw new Error(\"not yet initialized\") },\n    getRestClient: (): RestClient => { throw new Error(\"not yet initialized\") },\n};\n\nexport const CosmWasmContext = React.createContext<ICosmWasmContext>(defaultContext);\n\nexport const useSdk = () => React.useContext(CosmWasmContext);\n\nexport interface WalletProviderProps {\n    config: AppConfig,\n    children: any,\n}\n\nexport interface SdkProviderProps {\n    config: AppConfig,\n    loadWallet: () => Promise<Wallet>,\n    children: any,\n}\n\nexport function BurnerWalletProvider(props: WalletProviderProps): JSX.Element {\n    return (\n        <SdkProvider config={props.config} loadWallet={burnerWallet}>\n          {props.children}\n        </SdkProvider>\n      );    \n}\n\nexport function SdkProvider(props: SdkProviderProps): JSX.Element {\n    const [value, setValue] = useState(defaultContext);\n    const { setError } = useError();\n\n    const { config, loadWallet } = props;\n\n    // just call this once on startup\n    useEffect(() => {\n        loadWallet()\n            .then(wallet => connect(config.httpUrl, wallet))\n            .then(async ({address, client}) => {\n                // load from faucet if needed\n                if (config.faucetUrl) {\n                    const acct = await client.getAccount();\n                    if (!acct?.coins?.length) {\n                        console.log(\"Hitting faucet\");\n                        const result = await ky.post(config.faucetUrl, {json: {ticker: \"COSM\", address}});\n                        console.log(result);\n                    }\n                }\n\n                const restClient = new RestClient(config.httpUrl);\n                setValue({\n                    loading: false,\n                    address: address,\n                    getClient: () => client,\n                    getRestClient: () => restClient,\n                })\n            }).catch(setError);\n\n        // TODO: return a clean-up function???\n    }, [config.httpUrl, config.faucetUrl, loadWallet, setError]);\n\n    return (\n        <CosmWasmContext.Provider value={value}>\n          {props.children}\n        </CosmWasmContext.Provider>\n      );    \n}","import MuiButton, {ButtonProps} from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport * as React from \"react\";\n\n// TODO: pick some better styles\nconst useStyles = makeStyles({\n    root: {\n        background: \"#2196f3\",\n        color: \"white\",\n    },\n});\n\n// This is a page body to display when there is an error\nexport function Button(props: ButtonProps): JSX.Element {\n    const classes = useStyles();\n    return (\n        <MuiButton className={classes.root} {...props} />\n    );\n}\n\n\n","import MuiTypography from \"@material-ui/core/Typography\";\nimport * as React from \"react\";\n\nexport interface ErrorMessageProps {\n    readonly error: string;\n    readonly clearError: () => void;\n}\n\n// This is a page body to display when there is an error\nexport function ErrorMessage({error, clearError}: ErrorMessageProps): JSX.Element {\n    console.log(\"Render ErrorMessage\");\n    return (\n        <MuiTypography color=\"secondary\" variant=\"h6\" onClick={clearError}>Error: {error}</MuiTypography>\n    );\n}\n\n\n","import { types } from \"@cosmwasm/sdk\";\nimport { AppBar, IconButton, Toolbar } from \"@material-ui/core\";\nimport MuiTypography from \"@material-ui/core/Typography\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\nexport interface HeaderProps {\n    readonly account?: types.CosmosSdkAccount;\n}\n\nfunction renderBalance({coins}: types.CosmosSdkAccount): string {\n    return coins.map(({amount, denom}) => `${amount} ${denom}`).join(\", \") || '(Empty Account)';\n}\n\n// Show the current account or any error message in the header\nexport function Header({account}: HeaderProps): JSX.Element {\n    const balance = account ? renderBalance(account) : \"(Loading Balance)\";\n    const address = account ? account.address : \"(No Address)\";\n\n    return (\n        <React.Fragment>\n        <AppBar>\n            <Toolbar>\n                <Link to=\"/\">\n                    <IconButton edge=\"start\" color=\"inherit\">\n                        <ArrowBack />\n                    </IconButton>\n                </Link>\n                <MuiTypography variant=\"h6\">{address} - {balance}</MuiTypography>\n            </Toolbar>\n        </AppBar>\n        <Toolbar />\n        </React.Fragment>\n    );\n}\n\n","import MuiTypography from \"@material-ui/core/Typography\";\nimport * as React from \"react\";\n\nexport function Loading(): JSX.Element {\n    return (\n        <MuiTypography variant=\"h2\">Loading Wallet...</MuiTypography>\n    );\n}\n","import Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport * as React from \"react\";\n\nconst useStyles = makeStyles({\n    root: {\n      flexGrow: 1,\n    },\n});\n\ninterface Props {\n    readonly children: any;\n};\n\n// TODO: figure out a better grid system\nexport function PageLayout({children}: Props): JSX.Element {\n    const classes = useStyles();\n\n    return (\n        <Grid className={classes.root} container spacing={3}>\n            <Grid item xs={2} />\n            <Grid item xs>\n                {children}\n            </Grid>\n            <Grid item xs={2} />\n        </Grid>\n    );\n}","import * as React from \"react\";\n\nimport { useError } from \"../service\";\nimport { ErrorMessage } from \"../theme\";\n\n// HeaderLogic calculates the values to render the header component (which can be theme'd)\nfunction ErrorLogic(): JSX.Element {\n    const { error, clearError } = useError();\n\n    if (error) {\n        return (<ErrorMessage error={error} clearError={clearError} />);\n    } else {\n        return (<div />);\n    }\n}\n  \nexport default ErrorLogic;\n","import * as React from \"react\";\n\nimport { useSdk } from \"../service\";\nimport { Loading, PageLayout } from \"../theme\";\nimport ErrorLogic from \"./ErrorLogic\";\n\n// Splash is a container to either show a loading (splash) page, or render the app\n// with a given PageLayout\nfunction Splash(props: {readonly children: any}): JSX.Element {\n    const { loading } = useSdk();\n\n    if (loading) {\n        return (\n            <React.Fragment>\n                <Loading />\n                <ErrorLogic />\n            </React.Fragment>\n        );\n    } else {\n        return (\n            <PageLayout>\n                {props.children}\n            </PageLayout>\n        );    \n    }\n}\n  \nexport default Splash;\n","import { types } from \"@cosmwasm/sdk\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport WorkIcon from \"@material-ui/icons/Work\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport interface ContractItemProps {\n  readonly code_id: number;\n  /** Bech32 account address */\n  readonly address: string;\n  readonly creator: string;\n  /** Argument passed on initialization of the contract */\n  readonly init_msg: object;\n}\n\ninterface InitMsg {\n  readonly name: string;\n  readonly purchase_price?: types.Coin;\n  readonly transfer_price?: types.Coin;\n}\n\nexport function ContractItem({address, init_msg}: ContractItemProps): JSX.Element {\n  const { name } = (init_msg as InitMsg);\n\n    return (\n      <Link to={`/contract/${address}`}>\n        <ListItem>\n          <ListItemAvatar>\n            <Avatar>\n              <WorkIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={name} secondary={address} />\n        </ListItem>\n      </Link>\n    );\n}\n","import { RestClient } from \"@cosmwasm/sdk\";\nimport List from \"@material-ui/core/List\";\nimport * as React from \"react\";\n\nimport { config } from \"../../config\";\nimport { useError, useSdk } from \"../../service\";\nimport {ContractItem, ContractItemProps} from \"./ContractItem\";\n\nconst defaultCodeId = config.codeId;\n\nexport interface State {\n    readonly contracts: readonly ContractItemProps[];\n}\n\n// TODO: we need to fix rest api, so this is one call (currently the list by code id doesn't return addresses of the contracts)\nasync function listContractsByCodeId(client: RestClient, codeId: number): Promise<readonly ContractItemProps[]> {\n    let result = [];\n    const addrs = await client.listContractAddresses();\n    for (const address of addrs) {\n        const info = await client.getContractInfo(address);\n        if (info.code_id === codeId) {\n            result.push({...info, address})\n        }\n    }\n    return result;\n}\n\nfunction ContractList(): JSX.Element {\n    const { getRestClient } = useSdk();\n    const { setError } = useError();\n\n    const [value, setValue] = React.useState<State>({contracts: []});\n\n    // get the contracts\n    React.useEffect(() => {\n        listContractsByCodeId(getRestClient(), defaultCodeId)\n            .then(contracts => setValue({ contracts }))\n            .catch(setError);\n    }, [getRestClient, setError])\n\n    return (\n        <List>\n            {value.contracts.map(props  => \n                <ContractItem {...props} key={props.address} />\n            )}\n        </List>\n    );\n}\n  \nexport default ContractList;\n  ","import { types } from \"@cosmwasm/sdk\";\nimport * as React from \"react\";\n\nimport { useError, useSdk } from \"../service\";\nimport { Header } from \"../theme\";\n\ninterface State {\n    readonly account?: types.CosmosSdkAccount;\n}\n\n// HeaderLogic calculates the values to render the header component (which can be theme'd)\nfunction HeaderLogic(): JSX.Element {\n    const { getClient } = useSdk();\n    const { setError } = useError();\n\n    const [value, setValue] = React.useState<State>({});\n\n    // TODO: periodic updates somehow\n    React.useEffect(() => {\n        // TODO: call faucet on zero balance\n        getClient().getAccount()\n            .then(account => setValue({account}))\n            .catch(setError);\n    }, [getClient, setError])\n\n    return (<Header {...value}/>);    \n}\n  \nexport default HeaderLogic;\n","import { types } from \"@cosmwasm/sdk\";\nimport MuiTypography from \"@material-ui/core/Typography\";\nimport * as React from \"react\";\n\nexport interface InitMsg {\n    readonly name: string;\n    readonly purchase_price?: types.Coin;\n    readonly transfer_price?: types.Coin;\n}\n\nexport interface ContractInfoProps {\n    readonly address: string;\n    readonly code_id: number;\n    /** Bech32 account address */\n    readonly creator: string;\n    /** Argument passed on initialization of the contract */\n    readonly init_msg: InitMsg;\n}\n\nfunction coin_str(coin?: types.Coin): string {\n    return coin ? `${coin.amount} ${coin.denom}` : \"0\";\n}\n\nexport function ContractInfo(props: ContractInfoProps): JSX.Element {\n    return (\n        <React.Fragment>\n            <MuiTypography variant=\"h5\">Details of name service \"{props.init_msg.name}\":</MuiTypography>\n            <ul>\n                <li>Code ID: {props.code_id}</li>\n                <li>Address: {props.address}</li>\n                <li>Purchase price: {coin_str(props.init_msg.purchase_price)}</li>\n                <li>Transfer price: {coin_str(props.init_msg.transfer_price)}</li>\n            </ul>    \n        </React.Fragment>\n    );\n}","import MuiTextField, { TextFieldProps } from \"@material-ui/core/TextField\";\nimport { FieldSubscription, FieldValidator, FormApi } from \"final-form\";\nimport * as React from \"react\";\nimport { useField } from \"react-final-form-hooks\";\n\nexport type FieldInputValue = string | undefined;\nexport type ValidationError = string | undefined;\n\ninterface InnerProps {\n  readonly name: string;\n  readonly form: FormApi;\n  readonly validate?: FieldValidator<FieldInputValue>;\n  readonly onChanged?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  readonly subscription?: FieldSubscription;\n}\n\ntype Props = InnerProps & TextFieldProps;\n\nexport const TextField = ({ name, form, validate, onChanged, ...restProps }: Props): JSX.Element => {\n  const { input, meta } = useField(name, form, validate);\n  const error = meta.error && (meta.touched || !meta.pristine);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    input.onChange(event);\n\n    if (onChanged) onChanged(event);\n  };\n\n  return (\n    <MuiTextField\n      error={error}\n      name={input.name}\n      value={input.value}\n      helperText={error ? meta.error : undefined}\n      onChange={handleChange}\n      margin=\"normal\"\n      {...restProps}\n    />\n  );\n};\n\n\nexport const longerThan = (minLength: number): FieldValidator<FieldInputValue> => {\n    return (value): ValidationError => {\n      if (value && value.length < minLength) {\n        return `Must be longer than ${minLength} characters`;\n      }\n  \n      return undefined;\n    };\n  };\n\n  export function composeValidators<T>(...validators: readonly FieldValidator<T>[]): FieldValidator<T> {\n    return (value, allValues, meta): ValidationError => {\n      for (const validator of validators) {\n        const validationError = validator(value, allValues, meta);\n  \n        if (validationError) {\n          return validationError;\n        }\n      }\n  \n      return undefined;\n    };\n  }\n\n  export const required: FieldValidator<FieldInputValue> = (value): ValidationError => {\n    return value ? undefined : \"Required\";\n  };\n  ","import Box from \"@material-ui/core/Box\";\nimport * as React from \"react\";\nimport { useMemo } from \"react\";\nimport { useForm } from \"react-final-form-hooks\";\n\nimport { Button } from \"../../theme\";\nimport { composeValidators, longerThan, required, FormValues, TextField }  from \"../Form\";\n\nexport const ADDRESS_FIELD = \"addressField\";\nconst ADDRESS_MIN_LENGTH = 45;\n\ninterface Props {\n    readonly onSubmit: (values: FormValues) => void;\n}\n  \nexport const TransferForm = (props: Props): JSX.Element => {\n    const onSubmit = (values: object) => props.onSubmit(values as FormValues);\n  \n    const { form, handleSubmit, submitting, invalid } = useForm({\n      onSubmit,\n    });\n  \n    // TODO optimize update of validators with array of dependencies\n    const validatorName = useMemo(() => {\n      // TODO: better check for valid cosmos address\n      return composeValidators(required, longerThan(ADDRESS_MIN_LENGTH));\n    }, []);\n  \n    return (\n        <form onSubmit={handleSubmit}>\n          <Box display=\"block\" marginTop={2} marginBottom={1}>\n            <TextField\n              label=\"New Owner\"\n              placeholder=\"cosmos1234567...\"\n              type=\"text\"\n              form={form}\n              required\n              fullWidth\n              name={ADDRESS_FIELD}\n              validate={validatorName}\n            />\n          </Box>\n          <Box width={120} display=\"flex\" justifyContent=\"space-between\">\n              <Button fullWidth color=\"primary\" type=\"submit\" disabled={invalid || submitting}>Transfer</Button>\n          </Box>\n        </form>\n    );\n  };\n  ","import MuiTypography from \"@material-ui/core/Typography\";\nimport * as React from \"react\";\n\nimport { useError, useSdk } from \"../../service\";\nimport { Button } from \"../../theme\";\nimport { FormValues }  from \"../Form\";\nimport { InitMsg } from \"./ContractInfo\";\nimport { TransferForm, ADDRESS_FIELD } from \"./TransferForm\";\n\nexport interface NameDetailsProps {\n    readonly contractAddress: string;\n    readonly name: string;\n    readonly owner?: string;\n    readonly contract: InitMsg;\n    readonly onUpdate?: (signer: string) => void | Promise<void>;\n}\n\nexport function NameDetails(props: NameDetailsProps): JSX.Element {\n    const { address, getClient } = useSdk();\n    const { setError } = useError();\n\n    // TODO: add visual feedback for \"in process state\"\n    const doPurchase = async () => {\n        const { purchase_price } = props.contract;\n        const payment = purchase_price ? [purchase_price] : undefined;\n        console.log(\"buying\")\n        try {\n            await getClient().execute(props.contractAddress, {register: {name: props.name}}, \"Buying my name\", payment);\n            console.log(`Purchased`);\n            if (props.onUpdate) { props.onUpdate(address); }\n        } catch (err) {\n            setError(err);\n        }\n    }\n\n    const doTransfer = async (values: FormValues) => {\n        const { transfer_price } = props.contract;\n        const payment = transfer_price ? [transfer_price] : undefined;\n        const newOwner = values[ADDRESS_FIELD];\n        console.log(\"transfering\")\n        try {\n            await getClient().execute(props.contractAddress, {transfer: {name: props.name, to: newOwner}}, \"Transferring my name\", payment);\n            console.log(`Transferred`);\n            if (props.onUpdate) { props.onUpdate(newOwner); }\n        } catch (err) {\n            setError(err);\n        }\n    }\n\n    if (props.owner) {\n        const selfOwned = props.owner === address;\n        if (selfOwned) {\n            return (<div>\n                <MuiTypography color=\"secondary\" variant=\"h6\">You own {props.name}</MuiTypography>\n                <span>Do you want to transfer it?</span>\n                <TransferForm onSubmit={doTransfer} />\n            </div>);\n        }\n        return (\n            <div>\n                <MuiTypography color=\"secondary\" variant=\"h6\">{props.name} is owned</MuiTypography>\n                <span>Owned by: {props.owner}</span>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <MuiTypography variant=\"h6\">{props.name} is free</MuiTypography>\n            <Button color=\"primary\" type=\"submit\" onClick={doPurchase}>Buy</Button>\n        </div>\n    );\n}","import Box from \"@material-ui/core/Box\";\nimport * as React from \"react\";\nimport { useMemo } from \"react\";\nimport { useForm } from \"react-final-form-hooks\";\n\nimport { Button } from \"../../theme\";\nimport { composeValidators, longerThan, required, FormValues, TextField }  from \"../Form\";\n\nexport const NAME_FIELD = \"nameField\";\nconst NAME_MIN_LENGTH = 4;\n\ninterface Props {\n    readonly onSubmit: (values: FormValues) => void;\n}\n  \nexport const SearchForm = (props: Props): JSX.Element => {\n    const onSubmit = (values: object) => props.onSubmit(values as FormValues);\n  \n    const { form, handleSubmit, submitting, invalid } = useForm({\n      onSubmit,\n    });\n  \n    // TODO optimize update of validators with array of dependencies\n    const validatorName = useMemo(() => {\n      return composeValidators(required, longerThan(NAME_MIN_LENGTH));\n    }, []);\n  \n    return (\n        <form onSubmit={handleSubmit}>\n          <Box display=\"block\" marginTop={2} marginBottom={1}>\n            <TextField\n              label=\"Name\"\n              placeholder=\"Name\"\n              type=\"text\"\n              form={form}\n              required\n              fullWidth\n              name={NAME_FIELD}\n              validate={validatorName}\n            />\n          </Box>\n          <Box width={120} display=\"flex\" justifyContent=\"space-between\">\n              <Button color=\"primary\" fullWidth type=\"submit\" disabled={invalid || submitting}>\n                Search\n              </Button>\n          </Box>\n        </form>\n    );\n  };\n  ","import { Encoding } from \"@iov/encoding\";\nimport * as React from \"react\";\n\nimport { ContractInfo, ContractInfoProps } from \"./ContractInfo\";\nimport { NameDetails } from \"./NameDetails\";\nimport { FormValues }  from \"../Form\";\nimport { useError, useSdk } from \"../../service\";\nimport { SearchForm, NAME_FIELD } from \"./SearchForm\";\n\nexport interface ContractDetailsProps {\n    readonly address: string;\n}\n\nexport interface State{\n    readonly name?: string;\n    readonly owner?: string;\n    readonly loading: boolean;\n}\n  \nconst emptyInfo = {address: \"\", code_id: 0, creator: \"\", init_msg: {name: \"\"}};\n\nfunction parseQueryJson<T>(raw: Uint8Array): T {\n    return JSON.parse(Encoding.fromUtf8(raw));\n}\n\ninterface QueryResponse {\n    readonly address: string;\n}\n\nfunction ContractLogic(props: ContractDetailsProps): JSX.Element {\n    const { address } = props;\n    const { getClient, getRestClient } = useSdk();\n    const { setError } = useError();\n\n    const [value, setValue] = React.useState<ContractInfoProps>(emptyInfo);\n    const [state, setState] = React.useState<State>({loading: false});\n\n    // get the contracts\n    React.useEffect(() => {\n        getRestClient().getContractInfo(address)\n            .then(info => setValue({...info, address} as ContractInfoProps))\n            .catch(setError);\n    }, [getRestClient, setError, address])\n\n    React.useEffect(() => {\n        if (state.name) {\n            getClient()\n                .queryContractSmart(address, {resolverecord: {name: state.name}})\n                .then(res => { const o = parseQueryJson<QueryResponse>(res); setState({name: state.name, owner: o.address, loading: false})})\n                .catch(err => {\n                    // a not found error means it is free, other errors need to be repeated\n                    if (err.toString().includes(\"NameRecord not found\")) {\n                        setState({name: state.name, loading: false});\n                    } else {\n                        setState({loading: false});\n                        setError(err); \n                    }\n                });\n        }\n    }, [getClient, setError, address, state.name])\n\n    const onSearch = (values: FormValues) => {\n        setState({name: values[NAME_FIELD], loading: true});\n    }\n\n    const onPurchase = (owner: string) => {\n        setState({...state, owner});\n    }\n\n    return (\n        <div>\n             <ContractInfo {...value} />\n             <SearchForm onSubmit={onSearch}></SearchForm>\n             <hr />\n             { state.name ? state.loading ? (<div>Loading...</div>) : (<NameDetails contractAddress={address} name={state.name} owner={state.owner} contract={value.init_msg} onUpdate={onPurchase}/>) : \"\" }\n        </div>\n    );\n}\n  \nexport default ContractLogic;\n  ","import React from 'react';\nimport { useParams } from 'react-router';\n\nimport ContractLogic from \"../components/ContractLogic\";\n\nfunction Details() {\n    let { address } = useParams();\n\n  return (\n        <ContractLogic address={address || \"\"} />\n  );\n}\n\nexport default Details;\n","import * as serviceWorker from './serviceWorker';\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { config } from \"./config\";\nimport Splash from \"./components/Splash\";\nimport Routes from \"./routes\";\nimport { BurnerWalletProvider, ErrorProvider } from \"./service\"\n\n\nconst rootEl = document.getElementById(\"root\");\n\nconst render = (Component: React.ComponentType): void => {\n  ReactDOM.render(\n    <ErrorProvider>\n      <BurnerWalletProvider config={config}>\n        <Splash>\n          <Component />\n        </Splash>\n      </BurnerWalletProvider>\n    </ErrorProvider>,\n    rootEl,\n  );\n};\n\nrender(Routes);\n\nif ((module as any).hot) {\n  (module as any).hot.accept(\"./routes\", (): void => {\n    const NextApp = require(\"./routes\").default;\n    render(NextApp);\n  });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport ContractList from \"../components/ContractList\";\nimport ErrorLogic from \"../components/ErrorLogic\";\nimport HeaderLogic from \"../components/HeaderLogic\";\n\nimport Details from \"./details\";\n\nconst Routes = (): JSX.Element => (\n  <HashRouter basename=\"/\" >\n      <HeaderLogic />\n      <ErrorLogic />\n      <Switch>\n        <Route exact path=\"/\" component={ContractList} />\n        <Route path=\"/contract/:address\" component={Details} />\n      </Switch>\n  </HashRouter>\n);\n\nexport default Routes;\n"],"sourceRoot":""}