{"version":3,"sources":["serviceWorker.ts","service/sdk.ts","service/index.tsx","components/App/Header.tsx","components/App/index.tsx","components/ContractList/ContractItem.tsx","components/ContractList/index.tsx","components/Form/TextField.tsx","components/ContractDetails/TransferForm.tsx","components/ContractDetails/NameDetails.tsx","components/ContractDetails/SearchForm.tsx","components/ContractDetails/index.tsx","routes/details.tsx","index.tsx","routes/index.tsx"],"names":["Boolean","window","location","hostname","match","loadOrCreateMnemonic","key","loaded","localStorage","getItem","generated","Bip39","encode","Random","getBytes","toString","setItem","burnerWallet","a","mnemonic","Secp256k1Pen","fromMnemonic","pen","pubkey","encodeSecp256k1Pubkey","address","encodeAddress","signer","signBytes","sign","httpUrl","client","SigningCosmWasmClient","defaultConfig","faucetUrl","defaultContext","loading","getClient","Error","getRestClient","CosmWasmContext","React","useSdk","BurnerWalletProvider","props","SdkProvider","config","loadWallet","children","useState","value","setValue","useEffect","then","wallet","connect","getAccount","acct","coins","length","console","log","ky","post","json","ticker","result","restClient","RestClient","catch","err","Provider","Header","balance","account","map","amount","denom","join","error","AppBar","Toolbar","to","IconButton","edge","color","ArrowBack","variant","Loading","App","ContractItem","name","init_msg","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","codeId","listContractAddresses","addrs","getContractInfo","info","code_id","push","ContractList","contracts","listContractsByCodeId","List","TextField","form","validate","onChanged","restProps","useField","input","meta","touched","pristine","helperText","undefined","onChange","event","margin","longerThan","minLength","composeValidators","validators","allValues","validationError","validator","required","TransferForm","useForm","onSubmit","values","handleSubmit","submitting","invalid","validatorName","useMemo","Box","display","marginTop","marginBottom","label","placeholder","type","fullWidth","width","justifyContent","Button","disabled","NameDetails","doPurchase","purchase_price","contract","payment","execute","contractAddress","register","onUpdate","doTransfer","transfer_price","newOwner","transfer","owner","onClick","SearchForm","emptyInfo","creator","coin_str","coin","ContractDetails","state","setState","queryContractSmart","resolverecord","res","raw","o","JSON","parse","Encoding","fromUtf8","Details","Component","useParams","Routes","basename","exact","path","component","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f7e38c3e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SigningCosmWasmClient, encodeAddress, encodeSecp256k1Pubkey, Secp256k1Pen, types } from \"@cosmwasm/sdk\";\nimport { Bip39, Random } from \"@iov/crypto\";\n\n// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nexport function generateMnemonic(): string {\n    return Bip39.encode(Random.getBytes(16)).toString();\n}\n\n// some code that will only work in a browser...\nexport function loadOrCreateMnemonic(): string {\n    const key = \"burner-wallet\";\n    const loaded = localStorage.getItem(key);\n    if (loaded) {\n        return loaded;\n    }\n    const generated = generateMnemonic();\n    localStorage.setItem(key, generated);\n    return generated;\n}\n\nexport interface ConnectResult {\n    readonly address: string,\n    readonly client: SigningCosmWasmClient,\n}\n\nexport interface SigningCallback {\n    (signBytes: Uint8Array): Promise<types.StdSignature>;\n}\n  \nexport interface Wallet {\n    readonly address: string;\n    readonly signer: SigningCallback;\n}\n  \nexport async function burnerWallet(): Promise<Wallet> {\n    const mnemonic = loadOrCreateMnemonic();\n    const pen = await Secp256k1Pen.fromMnemonic(mnemonic);\n    const pubkey = encodeSecp256k1Pubkey(pen.pubkey);\n    const address = encodeAddress(pubkey, \"cosmos\");\n    const signer = (signBytes: Uint8Array) => pen.sign(signBytes);    \n    return { address, signer };\n}\n\n// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nexport async function connect(httpUrl: string, {address, signer}: Wallet): Promise<ConnectResult> {    \n    const client = new SigningCosmWasmClient(httpUrl, address, signer);\n    return { address, client} ;\n}\n","import ky from \"ky\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\n\nimport { RestClient, SigningCosmWasmClient } from \"@cosmwasm/sdk\";\n\nimport { burnerWallet, connect, Wallet } from \"./sdk\";\n\nexport interface AppConfig {\n    readonly httpUrl: string;\n    readonly faucetUrl?: string;\n}\n\nexport interface ICosmWasmContext {\n    readonly loading: boolean;\n    readonly address: string;\n    readonly getClient: () => SigningCosmWasmClient;\n    readonly getRestClient: () => RestClient;\n}\n\nexport const defaultConfig: AppConfig = {\n    httpUrl: \"https://lcd.demo.cosmwasm.com\",\n    faucetUrl: \"https://faucet.demo.cosmwasm.com/credit\",\n};\n\nconst defaultContext: ICosmWasmContext = {\n    loading: true,\n    address: \"\",\n    getClient: (): SigningCosmWasmClient => { throw new Error(\"not yet initialized\") },\n    getRestClient: (): RestClient => { throw new Error(\"not yet initialized\") },\n};\n\nexport const CosmWasmContext = React.createContext<ICosmWasmContext>(defaultContext);\n\nexport const useSdk = () => React.useContext(CosmWasmContext);\n\nexport interface WalletProviderProps {\n    config: AppConfig,\n    children: any,\n}\n\nexport interface SdkProviderProps {\n    config: AppConfig,\n    loadWallet: () => Promise<Wallet>,\n    children: any,\n}\n\nexport function BurnerWalletProvider(props: WalletProviderProps): JSX.Element {\n    return (\n        <SdkProvider config={props.config} loadWallet={burnerWallet}>\n          {props.children}\n        </SdkProvider>\n      );    \n}\n\nexport function SdkProvider(props: SdkProviderProps): JSX.Element {\n    const [value, setValue] = useState(defaultContext);\n\n    const { config, loadWallet } = props;\n\n    // just call this once on startup\n    useEffect(() => {\n        loadWallet()\n            .then(wallet => connect(config.httpUrl, wallet))\n            .then(async ({address, client}) => {\n                // load from faucet if needed\n                if (config.faucetUrl) {\n                    const acct = await client.getAccount();\n                    if (!acct?.coins?.length) {\n                        console.log(\"Hitting faucet\");\n                        const result = await ky.post(config.faucetUrl, {json: {ticker: \"COSM\", address}});\n                        console.log(result);\n                    }\n                }\n\n                const restClient = new RestClient(config.httpUrl);\n                setValue({\n                    loading: false,\n                    address: address,\n                    getClient: () => client,\n                    getRestClient: () => restClient,\n                })\n            }).catch(err => console.log(`Error: ${err}`));\n\n        // TODO: return a clean-up function???\n    }, [config.httpUrl, config.faucetUrl, loadWallet]);\n\n    return (\n        <CosmWasmContext.Provider value={value}>\n          {props.children}\n        </CosmWasmContext.Provider>\n      );    \n}","import { ArrowBack } from \"@material-ui/icons\";\nimport MuiTypography from \"@material-ui/core/Typography\";\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { types } from \"@cosmwasm/sdk\";\n\nimport { useSdk } from \"../../service\";\nimport { AppBar, IconButton, Toolbar } from \"@material-ui/core\";\n\nexport interface HeaderProps {\n    readonly children: any;\n}\n\ninterface State {\n    readonly account?: types.CosmosSdkAccount;\n    readonly error?: string;\n}\n\nfunction renderAccount({coins}: types.CosmosSdkAccount): string {\n    return coins.map(({amount, denom}) => `${amount} ${denom}`).join(\", \") || '(Empty Account)';\n}\n\nexport function Header(props: HeaderProps): JSX.Element {\n    const { address, getClient } = useSdk();\n\n    const [value, setValue] = React.useState<State>({});\n\n    const balance = value.account ? renderAccount(value.account) : (value.error ? value.error : \"(Loading)\");\n\n    // TODO: periodic updates somehow\n    React.useEffect(() => {\n        // TODO: call faucet on zero balance\n        getClient().getAccount()\n            .then(account => setValue({account}))\n            .catch(err => setValue({error: `${err}`}));\n    }, [getClient])\n\n    return (\n        <div>\n            <AppBar>\n                <Toolbar>\n                    <Link to=\"/\">\n                        <IconButton edge=\"start\" color=\"inherit\">\n                            <ArrowBack />\n                        </IconButton>\n                    </Link>\n                    <MuiTypography variant=\"h6\">{address} - {balance}</MuiTypography>\n                </Toolbar>\n            </AppBar>\n            <Toolbar />\n            {props.children}\n        </div>\n    )\n}\n","import MuiTypography from \"@material-ui/core/Typography\";\nimport * as React from \"react\";\n\nimport { useSdk } from \"../../service\";\n\nexport { Header } from \"./Header\";\n\nfunction Loading(): JSX.Element {\n    return (\n        <MuiTypography variant=\"h2\">Loading Wallet...</MuiTypography>\n    )\n}\n\nfunction App(props: {readonly children: any}): JSX.Element {\n    const { loading} = useSdk();\n\n\n    if (loading) {\n        return <Loading />\n    }\n\n    return (\n        <React.Fragment>\n            {props.children}\n        </React.Fragment>\n    );\n}\n  \nexport default App;\n  ","import { types } from \"@cosmwasm/sdk\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport WorkIcon from \"@material-ui/icons/Work\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport interface ContractItemProps {\n  readonly code_id: number;\n  /** Bech32 account address */\n  readonly address: string;\n  readonly creator: string;\n  /** Argument passed on initialization of the contract */\n  readonly init_msg: object;\n}\n\ninterface InitMsg {\n  readonly name: string;\n  readonly purchase_price?: types.Coin;\n  readonly transfer_price?: types.Coin;\n}\n\nexport function ContractItem({address, init_msg}: ContractItemProps): JSX.Element {\n  const { name } = (init_msg as InitMsg);\n\n    return (\n      <Link to={`/contract/${address}`}>\n        <ListItem>\n          <ListItemAvatar>\n            <Avatar>\n              <WorkIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={name} secondary={address} />\n        </ListItem>\n      </Link>\n    );\n}\n","import { RestClient } from \"@cosmwasm/sdk\";\nimport List from \"@material-ui/core/List\";\nimport MuiTypography from \"@material-ui/core/Typography\";\nimport * as React from \"react\";\n\nimport { useSdk } from \"../../service\";\nimport {ContractItem, ContractItemProps} from \"./ContractItem\";\n\nexport interface State {\n    readonly contracts: readonly ContractItemProps[];\n    readonly error?: string;\n}\n\n// TODO: make configurable\nconst defaultCodeId = 2;\n\nasync function listContractsByCodeId(client: RestClient, codeId: number): Promise<readonly ContractItemProps[]> {\n    let result = [];\n    const addrs = await client.listContractAddresses();\n    for (const address of addrs) {\n        const info = await client.getContractInfo(address);\n        if (info.code_id === codeId) {\n            result.push({...info, address})\n        }\n    }\n    return result;\n}\n\nfunction ContractList(): JSX.Element {\n    const { getRestClient } = useSdk();\n\n    const [value, setValue] = React.useState<State>({contracts: []});\n\n    // get the contracts\n    React.useEffect(() => {\n        listContractsByCodeId(getRestClient(), defaultCodeId)\n            .then(contracts => setValue({ contracts }))\n            .catch(err => setValue({contracts: [], error: `${err}`}));\n    }, [getRestClient])\n\n    if (value.error) {\n        return (\n            <MuiTypography color=\"secondary\" variant=\"h6\">Error: {value.error}</MuiTypography>\n        )\n    }\n    return (\n        <List>\n            {value.contracts.map(props  => \n                <ContractItem {...props} key={props.address} />\n            )}\n        </List>\n    );\n}\n  \nexport default ContractList;\n  ","import MuiTextField, { TextFieldProps } from \"@material-ui/core/TextField\";\nimport { FieldSubscription, FieldValidator, FormApi } from \"final-form\";\nimport * as React from \"react\";\nimport { useField } from \"react-final-form-hooks\";\n\nexport type FieldInputValue = string | undefined;\nexport type ValidationError = string | undefined;\n\ninterface InnerProps {\n  readonly name: string;\n  readonly form: FormApi;\n  readonly validate?: FieldValidator<FieldInputValue>;\n  readonly onChanged?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  readonly subscription?: FieldSubscription;\n}\n\ntype Props = InnerProps & TextFieldProps;\n\nexport const TextField = ({ name, form, validate, onChanged, ...restProps }: Props): JSX.Element => {\n  const { input, meta } = useField(name, form, validate);\n  const error = meta.error && (meta.touched || !meta.pristine);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    input.onChange(event);\n\n    if (onChanged) onChanged(event);\n  };\n\n  return (\n    <MuiTextField\n      error={error}\n      name={input.name}\n      value={input.value}\n      helperText={error ? meta.error : undefined}\n      onChange={handleChange}\n      margin=\"normal\"\n      {...restProps}\n    />\n  );\n};\n\n\nexport const longerThan = (minLength: number): FieldValidator<FieldInputValue> => {\n    return (value): ValidationError => {\n      if (value && value.length < minLength) {\n        return `Must be longer than ${minLength} characters`;\n      }\n  \n      return undefined;\n    };\n  };\n\n  export function composeValidators<T>(...validators: readonly FieldValidator<T>[]): FieldValidator<T> {\n    return (value, allValues, meta): ValidationError => {\n      for (const validator of validators) {\n        const validationError = validator(value, allValues, meta);\n  \n        if (validationError) {\n          return validationError;\n        }\n      }\n  \n      return undefined;\n    };\n  }\n\n  export const required: FieldValidator<FieldInputValue> = (value): ValidationError => {\n    return value ? undefined : \"Required\";\n  };\n  ","import Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport * as React from \"react\";\nimport { useMemo } from \"react\";\nimport { useForm } from \"react-final-form-hooks\";\n\nimport { composeValidators, longerThan, required, FormValues, TextField }  from \"../Form\";\n\nexport const ADDRESS_FIELD = \"addressField\";\nconst ADDRESS_MIN_LENGTH = 45;\n\ninterface Props {\n    readonly onSubmit: (values: FormValues) => void;\n}\n  \nexport const TransferForm = (props: Props): JSX.Element => {\n    const onSubmit = (values: object) => props.onSubmit(values as FormValues);\n  \n    const { form, handleSubmit, submitting, invalid } = useForm({\n      onSubmit,\n    });\n  \n    // TODO optimize update of validators with array of dependencies\n    const validatorName = useMemo(() => {\n      // TODO: better check for valid cosmos address\n      return composeValidators(required, longerThan(ADDRESS_MIN_LENGTH));\n    }, []);\n  \n    return (\n        <form onSubmit={handleSubmit}>\n          <Box display=\"block\" marginTop={2} marginBottom={1}>\n            <TextField\n              label=\"New Owner\"\n              placeholder=\"cosmos1234567...\"\n              type=\"text\"\n              form={form}\n              required\n              fullWidth\n              name={ADDRESS_FIELD}\n              validate={validatorName}\n            />\n          </Box>\n          <Box width={120} display=\"flex\" justifyContent=\"space-between\">\n              <Button fullWidth color=\"primary\" type=\"submit\" disabled={invalid || submitting}>Transfer</Button>\n          </Box>\n        </form>\n    );\n  };\n  ","import { types } from \"@cosmwasm/sdk\";\nimport Button from \"@material-ui/core/Button\";\nimport MuiTypography from \"@material-ui/core/Typography\";\nimport * as React from \"react\";\n\nimport { useSdk } from \"../../service\";\nimport { FormValues }  from \"../Form\";\nimport { TransferForm, ADDRESS_FIELD } from \"./TransferForm\";\n\nexport interface NameDetailsProps {\n    readonly contractAddress: string;\n    readonly name: string;\n    readonly owner?: string;\n    readonly contract: InitMsg;\n    readonly onUpdate?: (signer: string) => void | Promise<void>;\n}\n  \ninterface InitMsg {\n    readonly name: string;\n    readonly purchase_price?: types.Coin;\n    readonly transfer_price?: types.Coin;\n}\n\nexport function NameDetails(props: NameDetailsProps): JSX.Element {\n    const { address, getClient } = useSdk();\n\n    // TODO: add visual feedback for \"in process state\"\n    const doPurchase = async () => {\n        const { purchase_price } = props.contract;\n        const payment = purchase_price ? [purchase_price] : undefined;\n        console.log(\"buying\")\n        try {\n            await getClient().execute(props.contractAddress, {register: {name: props.name}}, \"Buying my name\", payment);\n            console.log(`Purchased`);\n            if (props.onUpdate) { props.onUpdate(address); }\n        } catch (err) {\n            console.log(`Purchase failed: ${err}`);\n        }\n    }\n\n    const doTransfer = async (values: FormValues) => {\n        const { transfer_price } = props.contract;\n        const payment = transfer_price ? [transfer_price] : undefined;\n        const newOwner = values[ADDRESS_FIELD];\n        console.log(\"transfering\")\n        try {\n            await getClient().execute(props.contractAddress, {transfer: {name: props.name, to: newOwner}}, \"Transferring my name\", payment);\n            console.log(`Transferred`);\n            if (props.onUpdate) { props.onUpdate(newOwner); }\n        } catch (err) {\n            console.log(`Transfer failed: ${err}`);\n        }\n    }\n\n    if (props.owner) {\n        const selfOwned = props.owner === address;\n        if (selfOwned) {\n            return (<div>\n                <MuiTypography color=\"secondary\" variant=\"h6\">You own {props.name}</MuiTypography>\n                <span>Do you want to transfer it?</span>\n                <TransferForm onSubmit={doTransfer} />\n            </div>);\n        }\n        return (\n            <div>\n                <MuiTypography color=\"secondary\" variant=\"h6\">{props.name} is owned</MuiTypography>\n                <span>Owned by: {props.owner}</span>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <MuiTypography variant=\"h6\">{props.name} is free</MuiTypography>\n            <Button color=\"primary\" type=\"button\" onClick={doPurchase}>Buy</Button>\n        </div>\n    );\n}","import Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport * as React from \"react\";\nimport { useMemo } from \"react\";\nimport { useForm } from \"react-final-form-hooks\";\n\nimport { composeValidators, longerThan, required, FormValues, TextField }  from \"../Form\";\n\nexport const NAME_FIELD = \"nameField\";\nconst NAME_MIN_LENGTH = 4;\n\ninterface Props {\n    readonly onSubmit: (values: FormValues) => void;\n}\n  \nexport const SearchForm = (props: Props): JSX.Element => {\n    const onSubmit = (values: object) => props.onSubmit(values as FormValues);\n  \n    const { form, handleSubmit, submitting, invalid } = useForm({\n      onSubmit,\n    });\n  \n    // TODO optimize update of validators with array of dependencies\n    const validatorName = useMemo(() => {\n      return composeValidators(required, longerThan(NAME_MIN_LENGTH));\n    }, []);\n  \n    return (\n        <form onSubmit={handleSubmit}>\n          <Box display=\"block\" marginTop={2} marginBottom={1}>\n            <TextField\n              label=\"Name\"\n              placeholder=\"Name\"\n              type=\"text\"\n              form={form}\n              required\n              fullWidth\n              name={NAME_FIELD}\n              validate={validatorName}\n            />\n          </Box>\n          <Box width={120} display=\"flex\" justifyContent=\"space-between\">\n              <Button color=\"primary\" fullWidth type=\"submit\" disabled={invalid || submitting}>\n                Search\n              </Button>\n          </Box>\n        </form>\n    );\n  };\n  ","import { types } from \"@cosmwasm/sdk\";\nimport { Encoding } from \"@iov/encoding\";\nimport MuiTypography from \"@material-ui/core/Typography\";\nimport * as React from \"react\";\n\nimport { NameDetails } from \"./NameDetails\";\nimport { FormValues }  from \"../Form\";\nimport { useSdk } from \"../../service\";\nimport { SearchForm, NAME_FIELD } from \"./SearchForm\";\n\nexport interface ContractDetailsProps {\n    readonly address: string;\n}\n\nexport interface ContractInfo {\n    readonly code_id: number;\n    /** Bech32 account address */\n    readonly creator: string;\n    /** Argument passed on initialization of the contract */\n    readonly init_msg: InitMsg;\n    readonly error?: string;\n}\n\nexport interface State{\n    readonly name?: string;\n    readonly owner?: string;\n    readonly loading: boolean;\n}\n  \ninterface InitMsg {\n    readonly name: string;\n    readonly purchase_price?: types.Coin;\n    readonly transfer_price?: types.Coin;\n}\n  \nconst emptyInfo = {code_id: 0, creator: \"\", init_msg: {name: \"\"}};\n\nfunction coin_str(coin?: types.Coin): string {\n    return coin ? `${coin.amount} ${coin.denom}` : \"0\";\n}\n\nfunction parseQueryJson<T>(raw: Uint8Array): T {\n    return JSON.parse(Encoding.fromUtf8(raw));\n}\n\ninterface QueryResponse {\n    readonly address: string;\n}\n\nfunction ContractDetails(props: ContractDetailsProps): JSX.Element {\n    const { address } = props;\n    const { getClient, getRestClient } = useSdk();\n\n    const [value, setValue] = React.useState<ContractInfo>(emptyInfo);\n    const [state, setState] = React.useState<State>({loading: false});\n\n    // get the contracts\n    React.useEffect(() => {\n        getRestClient().getContractInfo(address)\n            .then(info => setValue(info as ContractInfo))\n            .catch(err => setValue({...emptyInfo, error: `${err}`}));\n    }, [getRestClient, address])\n\n    React.useEffect(() => {\n        if (state.name) {\n            getClient()\n                .queryContractSmart(address, {resolverecord: {name: state.name}})\n                .then(res => { const o = parseQueryJson<QueryResponse>(res); setState({name: state.name, owner: o.address, loading: false})})\n                .catch(err => { console.log(err); setState({name: state.name, loading: false});});\n        }\n    }, [getClient, address, state.name])\n\n    const onSearch = (values: FormValues) => {\n        setState({name: values[NAME_FIELD], loading: true});\n    }\n\n    const onPurchase = (owner: string) => {\n        setState({...state, owner});\n    }\n\n    if (value.error) {\n        return (\n            <MuiTypography color=\"secondary\" variant=\"h6\">Error: {value.error}</MuiTypography>\n        )\n    }\n\n    return (\n        <div>\n             <MuiTypography variant=\"h5\">Details of name service \"{value.init_msg.name}\":</MuiTypography>\n             <ul>\n                 <li>Code ID: {value.code_id}</li>\n                 <li>Address: {address}</li>\n                 <li>Purchase price: {coin_str(value.init_msg.purchase_price)}</li>\n                 <li>Transfer price: {coin_str(value.init_msg.transfer_price)}</li>\n             </ul>\n             <SearchForm onSubmit={onSearch}></SearchForm>\n             <hr />\n             { state.name ? state.loading ? (<div>Loading...</div>) : (<NameDetails contractAddress={address} name={state.name} owner={state.owner} contract={value.init_msg} onUpdate={onPurchase}/>) : \"\" }\n        </div>\n    );\n}\n  \nexport default ContractDetails;\n  ","import React from 'react';\nimport { useParams } from 'react-router';\n\nimport ContractDetails from \"../components/ContractDetails\";\n\nfunction Details() {\n    let { address } = useParams();\n\n  return (\n        <ContractDetails address={address || \"\"} />\n  );\n}\n\nexport default Details;\n","import * as serviceWorker from './serviceWorker';\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\nimport Routes from \"./routes\";\nimport { BurnerWalletProvider, defaultConfig } from \"./service\"\n\nconst rootEl = document.getElementById(\"root\");\n\nconst render = (Component: React.ComponentType): void => {\n  ReactDOM.render(\n    <BurnerWalletProvider config={defaultConfig}>\n      <App>\n        <Component />\n      </App>\n    </BurnerWalletProvider>,\n    rootEl,\n  );\n};\n\nrender(Routes);\n\nif ((module as any).hot) {\n  (module as any).hot.accept(\"./routes\", (): void => {\n    const NextApp = require(\"./routes\").default;\n    render(NextApp);\n  });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport { Header } from \"../components/App\";\nimport ContractList from \"../components/ContractList\";\nimport Details from \"./details\";\n\nconst Routes = (): JSX.Element => (\n  <HashRouter basename=\"/\" >\n    <Header>\n      <Switch>\n        <Route exact path=\"/\" component={ContractList} />\n        <Route path=\"/contract/:address\" component={Details} />\n      </Switch>\n    </Header>\n  </HashRouter>\n);\n\nexport default Routes;\n"],"sourceRoot":""}