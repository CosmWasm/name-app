{"version":3,"sources":["serviceWorker.ts","service/error.tsx","config.ts","service/sdk.ts","service/wallet.tsx","theme/Button.tsx","theme/ErrorMessage.tsx","theme/Header.tsx","theme/Loading.tsx","theme/PageLayout.tsx","theme/styles.ts","components/ErrorLogic.tsx","components/Splash.tsx","components/ContractList/ContractItem.tsx","components/ContractList/index.tsx","components/HeaderLogic.tsx","components/ContractLogic/ContractInfo.tsx","components/Form/fields/FormTextField.tsx","components/Form/validationSchema.ts","components/ContractLogic/TransferForm.tsx","components/ContractLogic/NameDetails.tsx","components/ContractLogic/SearchForm.tsx","components/ContractLogic/index.tsx","routes/contract.tsx","routes/name.tsx","index.tsx","routes/index.tsx"],"names":["Boolean","window","location","hostname","match","initError","config","httpUrl","faucetUrl","codeId","callback","state","error","setError","err","console","log","toString","clearError","ErrorContext","React","useError","ErrorProvider","props","value","setValue","undefined","context","Provider","children","loadOrCreateMnemonic","key","loaded","localStorage","getItem","generated","Bip39","encode","Random","getBytes","setItem","burnerWallet","a","mnemonic","Secp256k1Pen","fromMnemonic","pen","pubkey","encodeSecp256k1Pubkey","address","pubkeyToAddress","signer","signBytes","sign","client","SigningCosmWasmClient","defaultContext","loading","getClient","Error","CosmWasmContext","useSdk","BurnerWalletProvider","SdkProvider","loadWallet","useState","useEffect","then","wallet","connect","getAccount","acct","balance","length","ky","post","json","ticker","result","catch","useStyles","makeStyles","root","height","width","background","border","outline","borderRadius","padding","fontSize","fontWeight","color","boxShadow","Button","classes","disableElevation","disableFocusRipple","disableRipple","className","ErrorMessage","variant","onClick","ElevationScroll","trigger","useScrollTrigger","disableHysteresis","threshold","elevation","Header","account","map","amount","denom","join","AppBar","Toolbar","to","IconButton","edge","ArrowBack","Loading","flexGrow","PageLayout","Grid","container","spacing","item","xs","useBaseStyles","card","margin","maxWidth","listStyleType","display","gridTemplateColumns","listCardContainer","position","justifyContent","alignItems","listCard","link","textDecoration","form","flexDirection","input","isFree","marginBottom","paddingLeft","isOwned","bottomSpacer","ErrorLogic","Splash","ContractItem","label","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","defaultCodeId","ContractList","contracts","setContracts","getContracts","List","HeaderLogic","coin_str","coin","ContractInfo","initMsg","purchase_price","transfer_price","FormTextField","type","placeholder","useField","field","meta","errorText","touched","TextField","id","helperText","fullWidth","SearchValidationSchema","Yup","shape","name","min","required","TransferValidationSchema","addressField","TransferForm","handleTransfer","initialValues","validationSchema","onSubmit","setSubmitting","handleSubmit","isSubmitting","disabled","NameDetails","contractAddress","setState","queryContractSmart","resolverecord","res","raw","o","JSON","parse","Encoding","fromUtf8","owner","includes","doPurchase","contract","payment","execute","register","doTransfer","values","newOwner","transfer","SearchForm","handleSearch","emptyInfo","creator","ContractLogic","history","useHistory","getContract","info","searchName","push","ContractSearch","useParams","Component","Routes","basename","exact","path","component","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4c46be8e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from \"react\";\n\n/*\nUgly to use a singleton to manage functions, but the issue is that we want to return the same\nsetError, clearError functions to the consumers, so they don't trigger new effects everytime\nwe update the error state, which can lead to an infinite loop:\n\nComponent.useEffect returns error, calls setError\nErrorProvider updates value and returns new closure for setError\nuseEffect is triggered again, with another error....\n\nWhen this is updated, we only want things to re-render that depend on the actual error value.\nThere may be cleaner ways to do this but encapsulating a singleton here seemed fine.\n(We can't rely on local variables that change each time ErrorProvider() is called).\n*/\n\nlet initError: string | undefined;\n\n// this should be set on first render\nlet callback = (state: State): void => {\n    // this is overriden on first render\n    initError = state.error; \n}\n\nfunction setError(err: any): void {\n    console.log(`Set error: ${err}`);\n    const error = (typeof err === \"string\") ? err : err.toString();\n    callback({error});\n}\n\nfunction clearError(): void {\n    console.log(`Clear error`);\n    callback({});\n}\n\n/******************/\n\nexport interface IErrorContext {\n    readonly error?: string;\n    readonly setError: (err: string) => void;\n    readonly clearError: () => void;\n}\n\nconst defaultContext = (): IErrorContext => {\n    return {\n        setError,\n        clearError,\n    };\n};\n\nexport const ErrorContext = React.createContext<IErrorContext>(defaultContext());\n\nexport const useError = () => React.useContext(ErrorContext);\n\ninterface State {\n    readonly error?: string;\n}\n\n\nexport function ErrorProvider(props: {readonly children: any}): JSX.Element {\n    console.log(\"Re-render ErrorProvider\");\n    const [value, setValue] = React.useState<State>({});\n    callback = setValue;\n    // if there is an error before we render the first time, make sure we render it\n    if (initError) {\n        setValue({error: initError});\n        initError = undefined;\n    }\n\n    const context: IErrorContext = {\n        error: value.error,\n        setError,\n        clearError,\n    };\n\n    return (\n        <ErrorContext.Provider value={context}>\n          {props.children}\n        </ErrorContext.Provider>\n      );    \n}\n","\nexport interface AppConfig {\n    readonly httpUrl: string;\n    readonly faucetUrl?: string;\n    // codeId is the wasm codeId for the name service contract on the given chain\n    readonly codeId: number;\n};\n\nconst local: AppConfig = {\n    httpUrl: \"http://localhost:1317\",\n    faucetUrl: \"http://localhost:8000/credit\",\n    codeId: 2,\n};\n\nconst demo: AppConfig = {\n    httpUrl: \"https://lcd.demo-07.cosmwasm.com\",\n    faucetUrl: \"https://faucet.demo-07.cosmwasm.com/credit\",\n    codeId: 2,\n};\n\n// REACT_APP_LOCAL is set via `yarn start:local`\nconst isLocal = process.env.NODE_ENV !== \"production\" && !!process.env.REACT_APP_LOCAL;\n\nexport const config = isLocal ? local : demo;","import { SigningCosmWasmClient, SigningCallback, encodeSecp256k1Pubkey, Secp256k1Pen, pubkeyToAddress } from \"@cosmwasm/sdk\";\nimport { Bip39, Random } from \"@iov/crypto\";\n\n// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nexport function generateMnemonic(): string {\n    return Bip39.encode(Random.getBytes(16)).toString();\n}\n\n// some code that will only work in a browser...\nexport function loadOrCreateMnemonic(): string {\n    const key = \"burner-wallet\";\n    const loaded = localStorage.getItem(key);\n    if (loaded) {\n        return loaded;\n    }\n    const generated = generateMnemonic();\n    localStorage.setItem(key, generated);\n    return generated;\n}\n\nexport interface ConnectResult {\n    readonly address: string,\n    readonly client: SigningCosmWasmClient,\n}\n  \nexport interface Wallet {\n    readonly address: string;\n    readonly signer: SigningCallback;\n}\n  \nexport async function burnerWallet(): Promise<Wallet> {\n    const mnemonic = loadOrCreateMnemonic();\n    const pen = await Secp256k1Pen.fromMnemonic(mnemonic);\n    const pubkey = encodeSecp256k1Pubkey(pen.pubkey);\n    const address = pubkeyToAddress(pubkey, \"cosmos\");\n    const signer = (signBytes: Uint8Array) => pen.sign(signBytes);    \n    return { address, signer };\n}\n\n// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nexport async function connect(httpUrl: string, {address, signer}: Wallet): Promise<ConnectResult> {    \n    const client = new SigningCosmWasmClient(httpUrl, address, signer);\n    return { address, client} ;\n}\n","import ky from \"ky\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\n\nimport { SigningCosmWasmClient } from \"@cosmwasm/sdk\";\n\nimport { AppConfig } from \"../config\";\nimport { useError } from \"./error\";\nimport { burnerWallet, connect, Wallet } from \"./sdk\";\n\nexport interface ICosmWasmContext {\n    readonly loading: boolean;\n    readonly address: string;\n    readonly getClient: () => SigningCosmWasmClient;\n}\n\nconst defaultContext: ICosmWasmContext = {\n    loading: true,\n    address: \"\",\n    getClient: (): SigningCosmWasmClient => { throw new Error(\"not yet initialized\") },\n};\n\nexport const CosmWasmContext = React.createContext<ICosmWasmContext>(defaultContext);\n\nexport const useSdk = () => React.useContext(CosmWasmContext);\n\nexport interface WalletProviderProps {\n    config: AppConfig,\n    children: any,\n}\n\nexport interface SdkProviderProps {\n    config: AppConfig,\n    loadWallet: () => Promise<Wallet>,\n    children: any,\n}\n\nexport function BurnerWalletProvider(props: WalletProviderProps): JSX.Element {\n    return (\n        <SdkProvider config={props.config} loadWallet={burnerWallet}>\n          {props.children}\n        </SdkProvider>\n      );    \n}\n\nexport function SdkProvider(props: SdkProviderProps): JSX.Element {\n    const [value, setValue] = useState(defaultContext);\n    const { setError } = useError();\n\n    const { config, loadWallet } = props;\n\n    // just call this once on startup\n    useEffect(() => {\n        loadWallet()\n            .then(wallet => connect(config.httpUrl, wallet))\n            .then(async ({address, client}) => {\n                // load from faucet if needed\n                if (config.faucetUrl) {\n                    const acct = await client.getAccount();\n                    if (!acct?.balance?.length) {\n                        console.log(\"Hitting faucet\");\n                        const result = await ky.post(config.faucetUrl, {json: {ticker: \"COSM\", address}});\n                        console.log(result);\n                    }\n                }\n\n                setValue({\n                    loading: false,\n                    address: address,\n                    getClient: () => client,\n                })\n            }).catch(setError);\n\n        // TODO: return a clean-up function???\n    }, [config.httpUrl, config.faucetUrl, loadWallet, setError]);\n\n    return (\n        <CosmWasmContext.Provider value={value}>\n          {props.children}\n        </CosmWasmContext.Provider>\n      );    \n}","import MuiButton, {ButtonProps} from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport * as React from \"react\";\n\n// TODO: pick some better styles\nconst useStyles = makeStyles({\n    root: {\n        height: '40px',\n        width: '100%',\n        background: '#ebf5fc',\n        border: 'none',\n        outline: 'none',\n        borderRadius: '20px',\n        padding: '5px 15px',\n        fontSize: '20px',\n        fontWeight: 500,\n        color: '#3d5af1',\n        boxShadow: '-2px -2px 6px rgba(255, 255, 255, 1), 2px 2px 6px rgba(0, 0, 0, 0.1)',\n        '&:hover': {\n            boxShadow: '-2px -2px 6px rgba(255, 255, 255, 1), 2px 2px 6px rgba(0, 0, 0, 0.1)',\n            background: '#ebf5fc',\n        },\n        '&:active': {\n            boxShadow: 'inset -2px -2px 6px rgba(255, 255, 255, 1), inset 2px 2px 6px rgba(0, 0, 0, 0.1)',\n            background: '#ebf5fc',\n        }\n    },\n});\n\n// This is a page body to display when there is an error\nexport function Button(props: ButtonProps): JSX.Element {\n    const classes = useStyles();\n    return (\n        <MuiButton\n            disableElevation\n            disableFocusRipple\n            disableRipple\n            className={classes.root} {...props}\n        />\n    );\n}\n\n\n","import MuiTypography from \"@material-ui/core/Typography\";\nimport * as React from \"react\";\n\nexport interface ErrorMessageProps {\n    readonly error: string;\n    readonly clearError: () => void;\n}\n\n// This is a page body to display when there is an error\nexport function ErrorMessage({error, clearError}: ErrorMessageProps): JSX.Element {\n    console.log(\"Render ErrorMessage\");\n    return (\n        <MuiTypography color=\"secondary\" variant=\"h6\" onClick={clearError}>Error: {error}</MuiTypography>\n    );\n}\n\n\n","import { Account } from \"@cosmwasm/sdk\";\nimport { AppBar, IconButton, Toolbar } from \"@material-ui/core\";\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport MuiTypography from \"@material-ui/core/Typography\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction ElevationScroll(props: any) {\n    const { children } = props;\n    const trigger = useScrollTrigger({\n      disableHysteresis: true,\n      threshold: 0,\n    //   target: window ? window() : undefined,\n    });\n  \n    return React.cloneElement(children, {\n      elevation: trigger ? 4 : 0,\n    });\n  }\n\nexport interface HeaderProps {\n    readonly account?: Account;\n    children?: React.ReactElement;\n}\n\n\nfunction renderBalance({ balance }: Account): string {\n    return balance.map(({amount, denom}) => `${amount} ${denom}`).join(\", \") || '(Empty Account)';\n}\n\n\n\n// Show the current account or any error message in the header\nexport function Header({account, children}: HeaderProps, props: any): JSX.Element {\n    const balance = account ? renderBalance(account) : \"(Loading Balance)\";\n    const address = account ? account.address : \"(No Address)\";\n\n    return (\n        <React.Fragment>\n            <ElevationScroll {...props}>\n                <AppBar>\n                    <Toolbar>\n                        <Link to=\"/\">\n                            <IconButton edge=\"start\" color=\"inherit\">\n                                <ArrowBack />\n                            </IconButton>\n                        </Link>\n                        <MuiTypography variant=\"h6\">{address} - {balance}</MuiTypography>\n                    </Toolbar>\n                </AppBar>\n            </ElevationScroll>\n            <Toolbar />\n        </React.Fragment>\n    );\n}\n\n","import MuiTypography from \"@material-ui/core/Typography\";\nimport * as React from \"react\";\n\nexport function Loading(): JSX.Element {\n    return (\n        <MuiTypography variant=\"h2\">Loading Wallet...</MuiTypography>\n    );\n}\n","import Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport * as React from \"react\";\n\nconst useStyles = makeStyles({\n    root: {\n      flexGrow: 1,\n      height: '100vh',\n      background: '#ebf5fc',\n    },\n});\n\ninterface Props {\n    readonly children: any;\n};\n\n// TODO: figure out a better grid system\nexport function PageLayout({children}: Props): JSX.Element {\n    const classes = useStyles();\n\n    return (\n        <Grid className={classes.root} container spacing={3}>\n            <Grid item xs={2} />\n            <Grid item xs>\n                {children}\n            </Grid>\n            <Grid item xs={2} />\n        </Grid>\n    );\n}","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useBaseStyles = makeStyles({\n  card: {\n    width: '60vw',\n    margin: '40px 20px',\n    padding: '30px 40px',\n    background: '#ebf5fc',\n    boxShadow: '-5px -5px 15px rgba(255, 255, 255, 0.8), 5px 5px 10px rgba(0, 0, 0, 0.1)',\n    borderRadius: '25px',\n    maxWidth: '600px',\n    '& ul': {\n      listStyleType: 'none',\n      padding: '0'\n    },\n    '& li': {\n      display: 'grid',\n      gridTemplateColumns: '20% 80%',\n    },\n    '& li p:first-child': {\n      color: '#3d5af1',\n    },\n  },\n  listCardContainer: {\n    position: 'relative',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  listCard: {\n    width: '60vw',\n    margin: '20px',\n    padding: '30px 40px',\n    borderRadius: '116px',\n    background: '#ebf5fc',\n    boxShadow: '-5px -5px 15px rgba(255, 255, 255, 0.8), 5px 5px 10px rgba(0, 0, 0, 0.1)',\n    '&:hover': {\n      boxShadow: 'inset -5px -5px 10px rgba(255,255,255,0.5), inset 5px 5px 10px rgba(0,0,0,0.05)',\n    }\n  },\n  link: {\n    textDecoration: 'none',\n    color: '#3d5af1',\n  },\n  form: {\n    height: '115px',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    maxWidth: '600px',\n  },\n  input: {\n    display: 'flex',\n    '& input': {\n      height: '30px',\n      width: '100%',\n      background: '#ebf5fc',\n      border: 'none',\n      outline: 'none',\n      borderRadius: '20px',\n      padding: '5px 15px',\n      fontSize: '18px',\n      color: '#3d5af1',\n      boxShadow: 'inset -2px -2px 6px rgba(255, 255, 255, 1), inset 2px 2px 6px rgba(0, 0, 0, 0.1);',\n    }\n  },\n  isFree: {\n    color: '#00BB6D',\n    marginBottom: '20px',\n    paddingLeft: '8px',\n  },\n  isOwned: {\n    color: '#ff304f',\n    marginBottom: '20px',\n    paddingLeft: '8px',\n  },\n  bottomSpacer: {\n    marginBottom: '8px',\n  }\n});","import * as React from \"react\";\n\nimport { useError } from \"../service\";\nimport { ErrorMessage } from \"../theme\";\n\n// HeaderLogic calculates the values to render the header component (which can be theme'd)\nfunction ErrorLogic(): JSX.Element {\n    const { error, clearError } = useError();\n\n    if (error) {\n        return (<ErrorMessage error={error} clearError={clearError} />);\n    } else {\n        return (<div />);\n    }\n}\n  \nexport default ErrorLogic;\n","import * as React from \"react\";\n\nimport { useSdk } from \"../service\";\nimport { Loading, PageLayout } from \"../theme\";\nimport ErrorLogic from \"./ErrorLogic\";\n\n// Splash is a container to either show a loading (splash) page, or render the app\n// with a given PageLayout\nfunction Splash(props: {readonly children: any}): JSX.Element {\n    const { loading } = useSdk();\n\n    if (loading) {\n        return (\n            <React.Fragment>\n                <Loading />\n                <ErrorLogic />\n            </React.Fragment>\n        );\n    } else {\n        return (\n            <PageLayout>\n                {props.children}\n            </PageLayout>\n        );    \n    }\n}\n  \nexport default Splash;\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport WorkIcon from \"@material-ui/icons/Work\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { useBaseStyles } from '../../theme'\n\nexport interface ContractItemProps {\n  readonly codeId: number;\n  /** Bech32 account address */\n  readonly address: string;\n  readonly creator: string;\n  readonly label: string;\n}\n\nexport function ContractItem({ address, label }: ContractItemProps): JSX.Element {\n  const classes = useBaseStyles();\n\n    return (\n      <div className={classes.listCardContainer}>\n        <Link className={classes.link} to={`/contract/${address}`}>\n          <ListItem className={classes.listCard}>\n            <ListItemAvatar>\n              <Avatar>\n                <WorkIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={label} secondary={address} />\n          </ListItem>\n        </Link>\n      </div>\n    );\n}\n","import List from \"@material-ui/core/List\";\nimport * as React from \"react\";\n\nimport { config } from \"../../config\";\nimport { useError, useSdk } from \"../../service\";\nimport {ContractItem, ContractItemProps} from \"./ContractItem\";\n\nconst defaultCodeId = config.codeId;\n\nfunction ContractList(): JSX.Element {\n    const { getClient } = useSdk();\n    const { setError } = useError();\n\n    const [contracts, setContracts] = React.useState<readonly ContractItemProps[]>([]);\n\n    // get the contracts\n    React.useEffect(() => {\n        getClient().getContracts(defaultCodeId)\n            .then(contracts => setContracts(contracts))\n            .catch(setError);\n    }, [getClient, setError]);\n\n    return (\n        <List>\n            {contracts.map(props  =>\n                <ContractItem {...props} key={props.address} />\n            )}\n        </List>\n    );\n}\n  \nexport default ContractList;\n  ","import { Account } from \"@cosmwasm/sdk\";\nimport * as React from \"react\";\n\nimport { useError, useSdk } from \"../service\";\nimport { Header } from \"../theme\";\n\ninterface State {\n    readonly account?: Account;\n}\n\n// HeaderLogic calculates the values to render the header component (which can be theme'd)\nfunction HeaderLogic(): JSX.Element {\n    const { getClient } = useSdk();\n    const { setError } = useError();\n\n    const [value, setValue] = React.useState<State>({});\n\n    // TODO: periodic updates somehow\n    React.useEffect(() => {\n        // TODO: call faucet on zero balance\n        getClient().getAccount()\n            .then(account => setValue({ account }))\n            .catch(setError);\n    }, [getClient, setError]);\n\n    return (<Header {...value}/>);    \n}\n  \nexport default HeaderLogic;\n","import * as React from \"react\";\nimport { types } from \"@cosmwasm/sdk\";\nimport MuiTypography from \"@material-ui/core/Typography\";\nimport { useBaseStyles } from '../../theme'\n\nexport interface InitMsg {\n    readonly purchase_price?: types.Coin;\n    readonly transfer_price?: types.Coin;\n}\n\nexport interface ContractInfoProps {\n    readonly address: string;\n    readonly codeId: number;\n    /** Bech32 account address */\n    readonly creator: string;\n    readonly label: string;\n    /** Argument passed on initialization of the contract */\n    readonly initMsg: InitMsg;\n}\n\nfunction coin_str(coin?: types.Coin): string {\n    return coin ? `${coin.amount} ${coin.denom}` : \"0\";\n}\n\nexport function ContractInfo(props: ContractInfoProps): JSX.Element {\n    const classes= useBaseStyles();\n\n    return (\n        <div className={classes.card}>\n            <MuiTypography variant=\"h5\">Details of name service \"{props.label}\":</MuiTypography>\n            <ul>\n                <li><p>Code ID:</p> <p>{props.codeId}</p></li>\n                <li><p>Address:</p> <p>{props.address}</p></li>\n                <li><p>Purchase price:</p> <p>{coin_str(props.initMsg.purchase_price)}</p></li>\n                <li><p>Transfer price:</p> <p>{coin_str(props.initMsg.transfer_price)}</p></li>\n            </ul>\n        </div>\n    );\n}","import * as React from 'react';\nimport { FieldAttributes, useField } from 'formik';\nimport { TextField } from '@material-ui/core';\n\ninterface TextFieldProps {\n  name: string;\n  type: string;\n  placeholder: string;\n}\n\nexport const FormTextField: React.FC<TextFieldProps & FieldAttributes<{}>> = ({\n  type,\n  placeholder,\n  ...props\n}: TextFieldProps) => {\n  const [field, meta] = useField<{}>(props);\n  const errorText = meta.error && meta.touched ? meta.error : '';\n\n  if (type === 'number') {\n    return (\n      <TextField\n        id=\"outlined-number\"\n        variant=\"outlined\"\n        type={type}\n        label={placeholder}\n        {...field}\n        helperText={errorText}\n        error={!!errorText}\n      />\n    );\n  }\n\n  return (\n    <TextField\n      type={type}\n      placeholder={placeholder}\n      fullWidth\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    />\n  );\n};\n","import * as Yup from 'yup';\n\nexport const SearchValidationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(4, 'Name can not be less than 4 characters')\n    .required('A Name is required'),\n});\n\nexport const TransferValidationSchema = Yup.object().shape({\n  addressField: Yup.string()\n    .min(45, 'Address invalid')\n    .required('An address is required'),\n});\n","import * as React from \"react\";\nimport { Formik, Form } from 'formik';\n\nimport { Button } from \"../../theme\";\nimport { FormValues }  from \"../Form\";\nimport { FormTextField } from \"../Form/fields/FormTextField\";\nimport { TransferValidationSchema } from \"../Form/validationSchema\";\nimport { useBaseStyles } from \"../../theme\";\n\nexport const ADDRESS_FIELD = \"addressField\";\n\ninterface TransferFormProps {\n    readonly handleTransfer: (values: FormValues) => void;\n}\n\nexport const TransferForm: React.FC<TransferFormProps> = ({ handleTransfer }: TransferFormProps) => {\n  const classes = useBaseStyles();\n\n    return (\n      <Formik\n        initialValues={{\n          addressField: '',\n        }}\n        validationSchema={TransferValidationSchema}\n        onSubmit={async ({ addressField }, { setSubmitting }) => {\n          setSubmitting(true);\n          handleTransfer({ addressField });\n\n        }}\n      >\n        {({ handleSubmit, isSubmitting }) => (\n          <Form onSubmit={handleSubmit} className={classes.form}>\n            <div className={classes.input}>\n              <FormTextField\n                placeholder=\"cosmos1234567...\"\n                name={ADDRESS_FIELD}\n                type=\"text\"\n                />\n            </div>\n            <div>\n              <Button type=\"submit\" disabled={isSubmitting}>\n                Transfer\n              </Button>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    );\n  };\n","import * as React from \"react\";\nimport { Encoding } from \"@iov/encoding\";\nimport MuiTypography from \"@material-ui/core/Typography\";\n\nimport { useError, useSdk } from \"../../service\";\nimport { Button, useBaseStyles } from \"../../theme\";\nimport { FormValues }  from \"../Form\";\nimport { InitMsg } from \"./ContractInfo\";\nimport { TransferForm, ADDRESS_FIELD } from \"./TransferForm\";\n\nexport interface NameDetailsProps {\n    readonly contractAddress: string;\n    readonly name: string;\n    readonly contract: InitMsg;\n}\n\nexport interface State{\n    readonly owner?: string;\n    readonly loading: boolean;\n}\n\nfunction parseQueryJson<T>(raw: Uint8Array): T {\n    return JSON.parse(Encoding.fromUtf8(raw));\n}\n\ninterface QueryResponse {\n    readonly address: string;\n}\n\nexport function NameDetails(props: NameDetailsProps): JSX.Element {\n    const classes = useBaseStyles()\n    const { name, contractAddress } = props;\n    const { address, getClient } = useSdk();\n    const { setError } = useError();\n\n    const [state, setState] = React.useState<State>({loading: false});\n\n    React.useEffect(() => {\n            setState({loading: true});\n            getClient()\n                .queryContractSmart(contractAddress, {resolverecord: {name}})\n                .then(res => { const o = parseQueryJson<QueryResponse>(res); setState({owner: o.address, loading: false})})\n                .catch(err => {\n                    setState({loading: false});\n                    // a not found error means it is free, other errors need to be reported\n                    if (!err.toString().includes(\"NameRecord not found\")) {\n                        setError(err);\n                    }\n                });\n    }, [getClient, setError, contractAddress, name])\n\n    // TODO: add visual feedback for \"in process state\"\n    const doPurchase = async () => {\n        const { purchase_price } = props.contract;\n        const payment = purchase_price ? [purchase_price] : undefined;\n        console.log(\"buying\")\n        try {\n            await getClient().execute(contractAddress, {register: {name: props.name}}, \"Buying my name\", payment);\n            console.log(`Purchased`);\n            setState({owner: address, loading: false});\n        } catch (err) {\n            setError(err);\n        }\n    }\n\n    const doTransfer = async (values: FormValues) => {\n        const { transfer_price } = props.contract;\n        const payment = transfer_price ? [transfer_price] : undefined;\n        const newOwner = values[ADDRESS_FIELD];\n        setState({loading: true});\n        console.log(\"transferring\")\n        try {\n            await getClient().execute(props.contractAddress, {transfer: {name: props.name, to: newOwner}}, \"Transferring my name\", payment);\n            console.log(`Transferred`);\n            setState({owner: newOwner, loading: false});\n        } catch (err) {\n            setState({loading: false});\n            setError(err);\n        }\n    }\n\n    // TODO: clean up all this logic.\n    // Use separate route for the transfer form (just inline the button, then new page for form)\n    // TODO: better loading state feedback\n\n    if (state.owner) {\n        const selfOwned = state.owner === address;\n        if (selfOwned) {\n            return (<div className={classes.card}>\n                <MuiTypography color=\"secondary\" variant=\"h6\">You own {props.name}</MuiTypography>\n                <MuiTypography className={classes.bottomSpacer} variant=\"body2\">Do you want to transfer it?</MuiTypography>\n                <TransferForm handleTransfer={doTransfer} />\n            </div>);\n        }\n        return (\n            <div className={classes.card}>\n                <MuiTypography color=\"secondary\" variant=\"h6\">{props.name} is owned</MuiTypography>\n                <span>Owned by: {state.owner}</span>\n            </div>\n        )\n    }\n\n    return (\n        <div className={classes.card}>\n            <MuiTypography className={classes.isFree} variant=\"h6\">{props.name} is free</MuiTypography>\n            <Button color=\"primary\" type=\"submit\" onClick={doPurchase}>Buy</Button>\n        </div>\n    );\n}","import * as React from \"react\";\nimport { Formik, Form } from 'formik';\n\nimport { Button } from \"../../theme\";\nimport { FormValues }  from \"../Form\";\nimport { FormTextField } from \"../Form/fields/FormTextField\";\nimport { SearchValidationSchema } from \"../Form/validationSchema\";\nimport { useBaseStyles } from \"../../theme\";\n\nexport const NAME_FIELD = \"name\";\n\ninterface SearchFormProps {\n    readonly handleSearch: (values: FormValues) => void;\n}\n\nexport const SearchForm: React.FC<SearchFormProps> = ({ handleSearch }: SearchFormProps) => {\n  const classes = useBaseStyles();\n\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n        }}\n        validationSchema={SearchValidationSchema}\n        onSubmit={async ({ name }, { setSubmitting }) => {\n          setSubmitting(true);\n          handleSearch({ name });\n        }}\n      >\n        {({ handleSubmit, isSubmitting }) => (\n          <Form onSubmit={handleSubmit} className={`${classes.card} ${classes.form}`}>\n            <div className={classes.input}>\n              <FormTextField\n                placeholder=\"Name\"\n                name=\"name\"\n                type=\"text\"\n                />\n            </div>\n            <div>\n              <Button type=\"submit\" disabled={isSubmitting}>\n                Search\n              </Button>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    );\n  };\n","import * as React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { ContractInfo, ContractInfoProps } from \"./ContractInfo\";\nimport { NameDetails } from \"./NameDetails\";\nimport { FormValues }  from \"../Form\";\nimport { useError, useSdk } from \"../../service\";\nimport { SearchForm, NAME_FIELD } from \"./SearchForm\";\n\nexport interface ContractDetailsProps {\n    readonly address: string;\n    readonly name?: string;\n}\n\nconst emptyInfo: ContractInfoProps = {\n  address: \"\",\n  codeId: 0,\n  creator: \"\",\n  label: \"\",\n  initMsg: {}\n};\n\nfunction ContractLogic({ address, name }: ContractDetailsProps): JSX.Element {\n    const { getClient } = useSdk();\n    const { setError } = useError();\n    const history = useHistory();\n\n    const [value, setValue] = React.useState<ContractInfoProps>(emptyInfo);\n\n    // get the contracts\n    React.useEffect(() => {\n        getClient().getContract(address)\n            .then(info => setValue({...info, address}))\n            .catch(setError);\n    }, [setError, address, getClient]);\n\n    const onSearch = (values: FormValues) => {\n        const searchName = values[NAME_FIELD];\n        history.push(`/contract/${address}/details/${searchName}`);\n    }\n\n    console.log(`ContractLogic with ${name}`);\n\n    return (\n        <div>\n             <ContractInfo {...value} />\n             <SearchForm handleSearch={onSearch}></SearchForm>\n             { name ? (<NameDetails contractAddress={address} name={name} contract={value.initMsg} />) : \"\" }\n        </div>\n    );\n}\n\nexport default ContractLogic;\n","import React from 'react';\nimport { useParams } from 'react-router';\n\nimport ContractLogic from \"../components/ContractLogic\";\n\nfunction ContractSearch() {\n  let { address } = useParams();\n\n  return (\n        <ContractLogic address={address || \"\"} />\n  );\n}\n\nexport default ContractSearch;\n","import React from 'react';\nimport { useParams } from 'react-router';\n\nimport ContractLogic from \"../components/ContractLogic\";\n\nfunction NameDetails() {\n    let { address, name } = useParams();\n\n  return (\n        <ContractLogic address={address || \"\"} name={name} />\n  );\n}\n\nexport default NameDetails;\n","import * as serviceWorker from './serviceWorker';\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport './index.css'\nimport { config } from \"./config\";\nimport Splash from \"./components/Splash\";\nimport Routes from \"./routes\";\nimport { BurnerWalletProvider, ErrorProvider } from \"./service\"\n\n\nconst rootEl = document.getElementById(\"root\");\n\nconst render = (Component: React.ComponentType): void => {\n  ReactDOM.render(\n    <ErrorProvider>\n      <BurnerWalletProvider config={config}>\n        <Splash>\n          <Component />\n        </Splash>\n      </BurnerWalletProvider>\n    </ErrorProvider>,\n    rootEl,\n  );\n};\n\nrender(Routes);\n\nif ((module as any).hot) {\n  (module as any).hot.accept(\"./routes\", (): void => {\n    const NextApp = require(\"./routes\").default;\n    render(NextApp);\n  });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport ContractList from \"../components/ContractList\";\nimport ErrorLogic from \"../components/ErrorLogic\";\nimport HeaderLogic from \"../components/HeaderLogic\";\n\nimport ContractSearch from \"./contract\";\nimport NameDetails from \"./name\";\n\nconst Routes = (): JSX.Element => (\n  <HashRouter basename=\"/\" >\n      <HeaderLogic />\n      <ErrorLogic />\n      <Switch>\n        <Route exact path=\"/\" component={ContractList} />\n        <Route exact path=\"/contract/:address\" component={ContractSearch} />\n        <Route path=\"/contract/:address/details/:name\" component={NameDetails} />\n      </Switch>\n  </HashRouter>\n);\n\nexport default Routes;\n"],"sourceRoot":""}